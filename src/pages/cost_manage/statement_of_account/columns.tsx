
import { TableColumnsType, Tag, Popconfirm } from 'antd';
import { StatementOfAccountItemProps } from "@/types/cost_manage/statement_of_account/statement_of_account";
import i18n from '@/i18n';
import LocaleHelper from '@/utils/localeHelper';



export const getColumns = (handleEdit: (record: StatementOfAccountItemProps) => void, handleDelete: (record: StatementOfAccountItemProps) => void): TableColumnsType<StatementOfAccountItemProps> => [

    {
        title: i18n.t(LocaleHelper.getStatementOfAccountStatementNumber()),
        width: 100,
        onHeaderCell: () => ({ style: { width: '100px' } }),
        dataIndex: 'StatementNumber',
        sorter: true,
        align: 'left',
        fixed: 'left',
    },
    {
        title: i18n.t(LocaleHelper.getStatementOfAccountSettlementObject()),
        width: 100,
        onHeaderCell: () => ({ style: { width: '100px' } }),
        dataIndex: 'SettlementObject',
        sorter: true,
        align: 'left',
        fixed: 'left',
    },
    {
        title: i18n.t(LocaleHelper.getStatementOfAccountCounterpartyStatementNumber()),
        width: 100,
        onHeaderCell: () => ({ style: { width: '100px' } }),
        dataIndex: 'CounterpartyStatementNumber',
        sorter: true,
        align: 'left',
    },
    {
        title: i18n.t(LocaleHelper.getStatementOfAccountCreator()),
        width: 100,
        onHeaderCell: () => ({ style: { width: '100px' } }),
        dataIndex: 'Creator',
        sorter: true,
        align: 'left',
    },
    {
        title: i18n.t(LocaleHelper.getStatementOfAccountStatementType()),
        width: 100,
        onHeaderCell: () => ({ style: { width: '100px' } }),
        dataIndex: 'StatementType',
        sorter: true,
        align: 'left',
    },
    {
        title: i18n.t(LocaleHelper.getStatementOfAccountInvoiceTitle()),
        width: 100,
        onHeaderCell: () => ({ style: { width: '100px' } }),
        dataIndex: 'InvoiceTitle',
        sorter: true,
        align: 'left',
    },
    {
        title: i18n.t(LocaleHelper.getStatementOfAccountTransactionType()),
        width: 100,
        onHeaderCell: () => ({ style: { width: '100px' } }),
        dataIndex: 'TransactionType',
        sorter: true,
        align: 'left',
    },
    {
        title: i18n.t(LocaleHelper.getStatementOfAccountConfirmationStatus()),
        width: 100,
        onHeaderCell: () => ({ style: { width: '100px' } }),
        dataIndex: 'ConfirmationStatus',
        sorter: true,
        align: 'left',
    },
    {
        title: i18n.t(LocaleHelper.getStatementOfAccountInvoicingStatus()),
        width: 100,
        onHeaderCell: () => ({ style: { width: '100px' } }),
        dataIndex: 'InvoicingStatus',
        sorter: true,
        align: 'left',
    },
    {
        title: i18n.t(LocaleHelper.getStatementOfAccountStatementWriteoffStatus()),
        width: 100,
        onHeaderCell: () => ({ style: { width: '100px' } }),
        dataIndex: 'StatementWriteoffStatus',
        sorter: true,
        align: 'left',
    },
    {
        title: i18n.t(LocaleHelper.getStatementOfAccountCurrency()),
        width: 100,
        onHeaderCell: () => ({ style: { width: '100px' } }),
        dataIndex: 'Currency',
        sorter: true,
        align: 'left',
    },
    {
        title: i18n.t(LocaleHelper.getStatementOfAccountAmount()),
        width: 100,
        onHeaderCell: () => ({ style: { width: '100px' } }),
        dataIndex: 'Amount',
        sorter: true,
        align: 'right',
    },
    {
        title: i18n.t(LocaleHelper.getStatementOfAccountWrittenOffAmount()),
        width: 100,
        onHeaderCell: () => ({ style: { width: '100px' } }),
        dataIndex: 'WrittenOffAmount',
        sorter: true,
        align: 'right',
    },
    {
        title: i18n.t(LocaleHelper.getStatementOfAccountInvoicingInfo()),
        width: 100,
        onHeaderCell: () => ({ style: { width: '100px' } }),
        dataIndex: 'InvoicingInfo',
        sorter: true,
        align: 'left',
    },
    {
        title: i18n.t(LocaleHelper.getStatementOfAccountRemarks()),
        width: 100,
        onHeaderCell: () => ({ style: { width: '100px' } }),
        dataIndex: 'Remarks',
        sorter: true,
        align: 'left',
    },
    {
        title: i18n.t(LocaleHelper.getStatementOfAccountCurrencyTotal()),
        width: 100,
        onHeaderCell: () => ({ style: { width: '100px' } }),
        dataIndex: 'CurrencyTotal',
        sorter: true,
        align: 'right',
    },
    {
        title: i18n.t(LocaleHelper.getStatementOfAccountConfirmationTime()),
        width: 100,
        onHeaderCell: () => ({ style: { width: '100px' } }),
        dataIndex: 'ConfirmationTime',
        sorter: true,
        align: 'center',
    },
    {
        title: i18n.t(LocaleHelper.getStatementOfAccountConfirmationPerson()),
        width: 100,
        onHeaderCell: () => ({ style: { width: '100px' } }),
        dataIndex: 'ConfirmationPerson',
        sorter: true,
        align: 'left',
    },
    {
        title: i18n.t(LocaleHelper.getStatementOfAccountBusinessReferenceNumber()),
        width: 100,
        onHeaderCell: () => ({ style: { width: '100px' } }),
        dataIndex: 'BusinessReferenceNumber',
        sorter: true,
        align: 'left',
    },
    {
        title: i18n.t(LocaleHelper.getStatementOfAccountCarrier()),
        width: 100,
        onHeaderCell: () => ({ style: { width: '100px' } }),
        dataIndex: 'Carrier',
        sorter: true,
        align: 'left',
    },
    {
        title: i18n.t(LocaleHelper.getStatementOfAccountPickupDeliveryLocation()),
        width: 100,
        onHeaderCell: () => ({ style: { width: '100px' } }),
        dataIndex: 'PickupDeliveryLocation',
        sorter: true,
        align: 'left',
    },
    {
        title: i18n.t(LocaleHelper.getStatementOfAccountActualPickupTime()),
        width: 100,
        onHeaderCell: () => ({ style: { width: '100px' } }),
        dataIndex: 'ActualPickupTime',
        sorter: true,
        align: 'center',
    },
    {
        title: i18n.t(LocaleHelper.getStatementOfAccountParentCompany()),
        width: 100,
        onHeaderCell: () => ({ style: { width: '100px' } }),
        dataIndex: 'ParentCompany',
        sorter: true,
        align: 'left',
    },
]; 
