
import { TableColumnsType, Tag, Popconfirm } from 'antd';
import { ActualPaymentItemProps } from "@/types/finance_manage/actual_payment";
import i18n from '@/i18n';
import LocaleHelper from '@/utils/locale';



export const getColumns = (handleEdit: (record: ActualPaymentItemProps) => void, handleDelete: (record: ActualPaymentItemProps) => void): TableColumnsType<ActualPaymentItemProps> => [

    {
        title: i18n.t(LocaleHelper.getActualPaymentSalesAccountNumber()),
        width: 100,
        onHeaderCell: () => ({ style: { width: '100px' } }),
        dataIndex: 'SalesAccountNumber',
        sorter: true,
        align: 'left',
        fixed: 'left',
    },
    {
        title: i18n.t(LocaleHelper.getActualPaymentSettlementObject()),
        width: 100,
        onHeaderCell: () => ({ style: { width: '100px' } }),
        dataIndex: 'SettlementObject',
        sorter: true,
        align: 'left',
        fixed: 'left',
    },
    {
        title: i18n.t(LocaleHelper.getActualPaymentBusinessNumber()),
        width: 100,
        onHeaderCell: () => ({ style: { width: '100px' } }),
        dataIndex: 'BusinessNumber',
        sorter: true,
        align: 'left',
        fixed: 'left',
    },
    {
        title: i18n.t(LocaleHelper.getActualPaymentSettlementAgent()),
        width: 100,
        onHeaderCell: () => ({ style: { width: '100px' } }),
        dataIndex: 'SettlementAgent',
        sorter: true,
        align: 'left',
        fixed: 'left',
    },
    {
        title: i18n.t(LocaleHelper.getActualPaymentCounterparty()),
        width: 100,
        onHeaderCell: () => ({ style: { width: '100px' } }),
        dataIndex: 'Counterparty',
        sorter: true,
        align: 'left',
    },
    {
        title: i18n.t(LocaleHelper.getActualPaymentOurBank()),
        width: 100,
        onHeaderCell: () => ({ style: { width: '100px' } }),
        dataIndex: 'OurBank',
        sorter: true,
        align: 'left',
    },
    {
        title: i18n.t(LocaleHelper.getActualPaymentPaymentNotificationNumber()),
        width: 100,
        onHeaderCell: () => ({ style: { width: '100px' } }),
        dataIndex: 'PaymentNotificationNumber',
        sorter: true,
        align: 'left',
    },
    {
        title: i18n.t(LocaleHelper.getActualPaymentVoucherNumber()),
        width: 100,
        onHeaderCell: () => ({ style: { width: '100px' } }),
        dataIndex: 'VoucherNumber',
        sorter: true,
        align: 'left',
    },
    {
        title: i18n.t(LocaleHelper.getActualPaymentBankStatementNumber()),
        width: 100,
        onHeaderCell: () => ({ style: { width: '100px' } }),
        dataIndex: 'BankStatementNumber',
        sorter: true,
        align: 'left',
    },
    {
        title: i18n.t(LocaleHelper.getActualPaymentSalesAccountPerson()),
        width: 100,
        onHeaderCell: () => ({ style: { width: '100px' } }),
        dataIndex: 'SalesAccountPerson',
        sorter: true,
        align: 'left',
    },
    {
        title: i18n.t(LocaleHelper.getActualPaymentSalesAccountDate()),
        width: 100,
        onHeaderCell: () => ({ style: { width: '100px' } }),
        dataIndex: 'SalesAccountDate',
        sorter: true,
        align: 'center',
    },
    {
        title: i18n.t(LocaleHelper.getActualPaymentReceiptPaymentDate()),
        width: 100,
        onHeaderCell: () => ({ style: { width: '100px' } }),
        dataIndex: 'ReceiptPaymentDate',
        sorter: true,
        align: 'center',
    },
    {
        title: i18n.t(LocaleHelper.getActualPaymentPaymentType()),
        width: 100,
        onHeaderCell: () => ({ style: { width: '100px' } }),
        dataIndex: 'PaymentType',
        sorter: true,
        align: 'left',
    },
    {
        title: i18n.t(LocaleHelper.getActualPaymentStatementStatus()),
        width: 100,
        onHeaderCell: () => ({ style: { width: '100px' } }),
        dataIndex: 'StatementStatus',
        sorter: true,
        align: 'left',
    },
    {
        title: i18n.t(LocaleHelper.getActualPaymentReceiptPaymentMethod()),
        width: 100,
        onHeaderCell: () => ({ style: { width: '100px' } }),
        dataIndex: 'ReceiptPaymentMethod',
        sorter: true,
        align: 'left',
    },
    {
        title: i18n.t(LocaleHelper.getActualPaymentIsAdvancePayment()),
        width: 100,
        onHeaderCell: () => ({ style: { width: '100px' } }),
        dataIndex: 'IsAdvancePayment',
        sorter: true,
        align: 'right',
    },
    {
        title: i18n.t(LocaleHelper.getActualPaymentCurrency()),
        width: 100,
        onHeaderCell: () => ({ style: { width: '100px' } }),
        dataIndex: 'Currency',
        sorter: true,
        align: 'left',
    },
    {
        title: i18n.t(LocaleHelper.getActualPaymentAmount()),
        width: 100,
        onHeaderCell: () => ({ style: { width: '100px' } }),
        dataIndex: 'Amount',
        sorter: true,
        align: 'right',
    },
    {
        title: i18n.t(LocaleHelper.getActualPaymentSoldAmount()),
        width: 100,
        onHeaderCell: () => ({ style: { width: '100px' } }),
        dataIndex: 'SoldAmount',
        sorter: true,
        align: 'right',
    },
    {
        title: i18n.t(LocaleHelper.getActualPaymentBalance()),
        width: 100,
        onHeaderCell: () => ({ style: { width: '100px' } }),
        dataIndex: 'Balance',
        sorter: true,
        align: 'right',
    },
    {
        title: i18n.t(LocaleHelper.getActualPaymentActualReceivedAmount()),
        width: 100,
        onHeaderCell: () => ({ style: { width: '100px' } }),
        dataIndex: 'ActualReceivedAmount',
        sorter: true,
        align: 'right',
    },
    {
        title: i18n.t(LocaleHelper.getActualPaymentActualPaidAmount()),
        width: 100,
        onHeaderCell: () => ({ style: { width: '100px' } }),
        dataIndex: 'ActualPaidAmount',
        sorter: true,
        align: 'right',
    },
    {
        title: i18n.t(LocaleHelper.getActualPaymentFinancialExpenses()),
        width: 100,
        onHeaderCell: () => ({ style: { width: '100px' } }),
        dataIndex: 'FinancialExpenses',
        sorter: true,
        align: 'right',
    },
    {
        title: i18n.t(LocaleHelper.getActualPaymentExchangeGainLoss()),
        width: 100,
        onHeaderCell: () => ({ style: { width: '100px' } }),
        dataIndex: 'ExchangeGainLoss',
        sorter: true,
        align: 'right',
    },
    {
        title: i18n.t(LocaleHelper.getActualPaymentMinorShortAccount()),
        width: 100,
        onHeaderCell: () => ({ style: { width: '100px' } }),
        dataIndex: 'MinorShortAccount',
        sorter: true,
        align: 'right',
    },
    {
        title: i18n.t(LocaleHelper.getActualPaymentOriginalCurrencyExchangeDifference()),
        width: 100,
        onHeaderCell: () => ({ style: { width: '100px' } }),
        dataIndex: 'OriginalCurrencyExchangeDifference',
        sorter: true,
        align: 'right',
    },
    {
        title: i18n.t(LocaleHelper.getActualPaymentCreator()),
        width: 100,
        onHeaderCell: () => ({ style: { width: '100px' } }),
        dataIndex: 'Creator',
        sorter: true,
        align: 'left',
    },
    {
        title: i18n.t(LocaleHelper.getActualPaymentReview()),
        width: 100,
        onHeaderCell: () => ({ style: { width: '100px' } }),
        dataIndex: 'Review',
        sorter: true,
        align: 'right',
    },
    {
        title: i18n.t(LocaleHelper.getActualPaymentReviewDate()),
        width: 100,
        onHeaderCell: () => ({ style: { width: '100px' } }),
        dataIndex: 'ReviewDate',
        sorter: true,
        align: 'center',
    },
    {
        title: i18n.t(LocaleHelper.getActualPaymentVoided()),
        width: 100,
        onHeaderCell: () => ({ style: { width: '100px' } }),
        dataIndex: 'Voided',
        sorter: true,
        align: 'right',
    },
    {
        title: i18n.t(LocaleHelper.getActualPaymentInvoiceInformation()),
        width: 100,
        onHeaderCell: () => ({ style: { width: '100px' } }),
        dataIndex: 'InvoiceInformation',
        sorter: true,
        align: 'left',
    },
    {
        title: i18n.t(LocaleHelper.getActualPaymentRemarks()),
        width: 100,
        onHeaderCell: () => ({ style: { width: '100px' } }),
        dataIndex: 'Remarks',
        sorter: true,
        align: 'left',
    },
    {
        title: i18n.t(LocaleHelper.getActualPaymentAccountPeriodDays()),
        width: 100,
        onHeaderCell: () => ({ style: { width: '100px' } }),
        dataIndex: 'AccountPeriodDays',
        sorter: true,
        align: 'right',
    },
    {
        title: i18n.t(LocaleHelper.getActualPaymentVoucherDate()),
        width: 100,
        onHeaderCell: () => ({ style: { width: '100px' } }),
        dataIndex: 'VoucherDate',
        sorter: true,
        align: 'center',
    },
    {
        title: i18n.t(LocaleHelper.getActualPaymentReviewer()),
        width: 100,
        onHeaderCell: () => ({ style: { width: '100px' } }),
        dataIndex: 'Reviewer',
        sorter: true,
        align: 'left',
    },
    {
        title: i18n.t(LocaleHelper.getActualPaymentBillSettlementType()),
        width: 100,
        onHeaderCell: () => ({ style: { width: '100px' } }),
        dataIndex: 'BillSettlementType',
        sorter: true,
        align: 'left',
    },
    {
        title: i18n.t(LocaleHelper.getActualPaymentAdvancePaymentRemarks()),
        width: 100,
        onHeaderCell: () => ({ style: { width: '100px' } }),
        dataIndex: 'AdvancePaymentRemarks',
        sorter: true,
        align: 'left',
    },
    {
        title: i18n.t(LocaleHelper.getActualPaymentReceiptPaymentVoucherNumber()),
        width: 100,
        onHeaderCell: () => ({ style: { width: '100px' } }),
        dataIndex: 'ReceiptPaymentVoucherNumber',
        sorter: true,
        align: 'left',
    },
    {
        title: '操作',
        key: 'operation',
        fixed: 'right',
        width: 100,
        render: (_, record) => (
        <>
            <a onClick={()=>handleEdit(record)}>编辑</a>
            <Popconfirm title="确定要删除吗?" cancelText="取消" okText="确定" onConfirm={() => handleDelete(record)}>
                <a>删除</a>
            </Popconfirm>
        </>
        ),
    },
]; 

